parameters:
    env(PROFILING_ENABLED): "1"
    env(PROFILING_PROMETHEUS_ACCESS_TOKEN): ~
    env(PROFILING_PROMOTHEUS_ENABLED): "0"
    env(PROFILING_PROMETHEUS_SCHEMA_AUTOCREATE): "0"
    profiling.prometheus.sample_logger.max_size: 100
    profiling.prometheus.schema_autocreate: "%env(bool:PROFILING_PROMETHEUS_SCHEMA_AUTOCREATE)%"
    # New ones will be overriden by extension.
    profiling.prometheus.namespace: symfony
    profiling.prometheus.request_ignored_methods: ['OPTION']
services:
    # Profiler service: the instance you need to inject into your services.
    profiling.profiler:
        class: MakinaCorpus\Profiling\Profiler\DefaultProfiler
        arguments:
            - "%env(bool:PROFILING_ENABLED)%"
            - "%env(bool:PROFILING_PROMOTHEUS_ENABLED)%"
            - "@profiling.prometheus.sample_logger"
            - "@logger"
        tags:
            - {name: 'monolog.logger', channel: 'profiling'}
            # Allow container to purge memory on terminate. This will also help
            # when running long-running CLI commands, such as a message bus
            # consumer.
            - {name: 'kernel.reset', method: 'exitContext'}
    MakinaCorpus\Profiling\Profiler:
        alias: profiling.profiler

    # Controller for fetching metrics.
    profiling.prometheus.controller:
        class: MakinaCorpus\Profiling\Bridge\Symfony\Controller\PrometheusController
        arguments: ['%env(resolve:PROFILING_PROMETHEUS_ACCESS_TOKEN)%', '@profiling.prometheus.storage', '@profiling.prometheus.schema']
        tags: ['controller.service_arguments']

    # Default sample schema, definitions are injected by extension/compiler.
    profiling.prometheus.schema:
        class: MakinaCorpus\Profiling\Prometheus\Schema\ArraySchema
        arguments: ['%profiling.prometheus.namespace%', [], "%kernel.debug%"]

    # Default sample storage, no storage, this needs to be configured.
    profiling.prometheus.storage:
        class: MakinaCorpus\Profiling\Prometheus\Storage\NullStorage

    # Sample logger.
    profiling.prometheus.sample_logger.self_flushing:
        class: MakinaCorpus\Profiling\Prometheus\Logger\SelfFlushingSampleLogger
        decorates: profiling.prometheus.sample_logger.default
        arguments:
            - '@.inner'
            - '%profiling.prometheus.sample_logger.max_size%'
            - "@logger"
        tags:
            - {name: 'monolog.logger', channel: 'profiling'}
    profiling.prometheus.sample_logger.default:
        class: MakinaCorpus\Profiling\Prometheus\Logger\MemorySampleLogger
        arguments:
            - '@profiling.prometheus.schema'
            - '@profiling.prometheus.storage'
            - "@logger"
        tags:
            - {name: 'monolog.logger', channel: 'profiling'}
    profiling.prometheus.sample_logger:
        alias: profiling.prometheus.sample_logger.default

    # Listener, where the magic happens.
    profiling.prometheus.matcher.console:
        class: MakinaCorpus\Profiling\Helper\Matcher
        arguments: ['']
    profiling.prometheus.matcher.route:
        class: MakinaCorpus\Profiling\Helper\Matcher
        arguments: ['']
    profiling.prometheus.event_subscriber.request:
        class: MakinaCorpus\Profiling\Bridge\Symfony\EventSubscriber\PrometheusEventSubscriber
        arguments:
            - '@profiling.profiler'
            - '@profiling.prometheus.matcher.console'
            - '@profiling.prometheus.matcher.route'
            - '%profiling.prometheus.request_ignored_methods%'
            - '@?profiling.prometheus.sys_info_collector'
        tags: ['kernel.event_subscriber']
