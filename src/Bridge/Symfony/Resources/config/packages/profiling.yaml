#
# Profiling configuration file, complete, will all default values.
#
# You may either copy/paste this file in your configuration then modify it
# or simply create an empty file and override only what you need. The only
# part where values are not defaults is the "handlers" section, which is
# empty per default. 
#
# Profiling is enabled by default, this means that all timers you start are
# kept in memory until it is flushed.
#
# Flusing happens either at:
#   - kernel terminate event,
#   - console terminate event,
#   - post message bus consumption.
#
# Disabling profiling do not means timers won't work anymore, it just means
# they won't be stored into memory, this is useful when you run long batches.
#
# In order to disable profiling, set this environement variable:
#
# PROFILING_ENABLED=0
#
profiling:
    #
    # Registered handlers for the TracingProfilerDecorator.
    #
    # Each handlers has a chance to react upon profiler close and do something
    # with it.
    #
    # Keys in this array are arbitrary user given names, they won't alter any
    # functions of this API.
    #
    # You can set the "channels" option on each item configured here, this will
    # dispatch profilers into various loggers depending on their configured
    # channel. Channel is set either:
    #   - at the Timer instance entry, using the "channel" tag.
    #   - at the ProfilerAware implementation, using a compiler pass.
    # The given array is a list of arbitrary names, each one can be prefixed
    # using ! case in which this channel will be blacklisted.
    # You cannot mix whitelist and blacklist.
    # If nothing provided, all channels will go throught. 
    #
    handlers:
        file_default:
            type: file
            path: "%kernel.logs_dir%/%kernel.environment%-profiling.trace"
            date_format: Y-m-d
            channels: ["!sql"]
            threshold:
                # If no suffix provided, this is a number of bytes, otherwise
                # it will be parsed like PHP ini file memory values.
                memory: 2M
            trigger: ~

        file_sql:
            type: file
            path: "%kernel.logs_dir%/%kernel.environment%-profiling-sql.trace"
            date_format: Y-m-d
            channels: ["sql"]
            threshold:
                # Time threshold will always be millesconds.
                # You set a float there, such as 1.25 for example.
                time: 100
            trigger: ~

        #
        # This example is a "slow query log" feature.
        #
        # An example that will store everything into a databse table. You can
        # use all other options. "type" is optional when "store" is set.
        #
        # "store_table" is optional, default table name is "profiling_trace".
        # You could use "%env(resolve:DATABASE_URL)%" for database URI.
        #
        slow_query_log:
            store: query-builder
            store_uri: pgsql://foo:bar@example.com/database
            store_table: slow_query_log
            channels: ["sql"]
            threshold:
                time: 100

        # Sentry does not support threshold.
        sentry:
            type: sentry4

        # Stopwatch does not support threshold.
        stopwatch:
            type: stopwatch

    #
    # Prometheus specific options.
    #
    # Per default, prometheus metrics are disabled.
    #
    # All examples values in this file are the defaults being applied if you
    # do not specify the values in your own configuration.
    #
    # In order to enable prometheus metrics, set this into your environment
    # variables:
    #
    # PROFILING_PROMOTHEUS_ENABLED=1
    #
    prometheus:
        #
        # Namespace for your application.
        #
        namespace: symfony

        #
        # HTTP methods to ignore.
        #
        request_ignore_methods: ["OPTION"]

        #
        # Router routes to ignore.
        #
        # You can use glob-like syntax here to match more than the simple string.
        #
        # Only "*" and "?" are interpreted in glob pattern.
        #
        request_ignore_routes: ['_profiler*', '_wdt']

        #
        # Console command prefixes to ignore.
        #
        # You can use glob-like syntax here to match more than the simple string
        # but in all cases, if the string ends with ':' a wildcard is implied at
        # the end, otherwise it's an exact match.
        #
        # Only "*" and "?" are interpreted in glob pattern.
        #
        console_ignore: ['assets:', 'cache:', 'config:', 'debug:', 'doctrine:', 'maker:', 'secrets:', 'security:', 'translation:']

        #
        # Driver storage options.
        #
        # Options you can pass in the URI string will depend upon each
        # storage implementation. Please refer to package documentation.
        #
        storage:
            type: query_builder
            uri: "%env(resolve:DATABASE_URL)%"
            options:
                table: "public.prometheus_metrics"

        #
        # Schema configuration.
        #
        # All samples collected must appear in this schema, they will be
        # validated prior being stored, and ignored if validation fails.
        #
        # Default schema will be registered by reading entries within the
        # "profiling.prometheus.schema.yaml" file. You are not allowed to
        # override samples defined in this file.
        #
        # You can add as many entries as you wish.
        #
        schema: {}

        #
        # This API can collect a few system information, not much but enough
        # for basic monitoring when you don't have access to better tools.
        #
        sys_info:
            #
            # Disable completely sys info collection.
            #
            enabled: false

            #
            # Monitor CPU load. It uses sys_getloadavg() which does not exist
            # on Windows environement. It returns a single value for all CPU
            # altogether.
            #
            load_average: true

            #
            # Monitor system memory usage. This will read directly /proc/meminfo
            # whis is basic Linux feature, but if it's not there, this will be
            # disabled silently.
            #
            memory_usage: true

            #
            # Monitor disk size. You can either set:
            #
            #   - false|null: disable it entirely.
            #
            #   - true: arbitrarily monitor disk size in the application mount
            #     point, which in most cases is not worth it.
            #
            #   - {name:path,...}: keys will be sample name which is used for
            #     the "name" label, values are mount path in the filesystem.
            #
            # Schema for this gauge samples will be automatically built during
            # kernel compilation.
            #
            disk_size:
                app: "%kernel.project_dir%"
                tmp: /tmp
                upload: "%kernel.project_dir%/var/upload"
                # ...
